package com.rocktech.sharebookcase.tool;import android.content.Context;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.telephony.TelephonyManager;import java.net.Inet4Address;import java.net.InetAddress;import java.net.NetworkInterface;import java.util.Enumeration;public class ConnectUtil {	public enum eNetType	{		eNone,		e2G,		e3G,		e4g,		eWifi,	}	public static NetworkInfo getActiveNetworkInfo(Context context)	{		return ((ConnectivityManager) context				.getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();	}		public static String getWifiIpAddr(Context context) {        WifiManager wifiManager = (WifiManager) (context.getSystemService(Context.WIFI_SERVICE));        WifiInfo wifiInfo = wifiManager.getConnectionInfo();        // 获取32位整型IP地址        int ipAddress = wifiInfo.getIpAddress();        return String.format("%d.%d.%d.%d",				(ipAddress & 0xff), (ipAddress >> 8 & 0xff),				(ipAddress >> 16 & 0xff), (ipAddress >> 24 & 0xff));    }		public static String getIpAddress() 	{		try		{			for (Enumeration<NetworkInterface> en = NetworkInterface					.getNetworkInterfaces(); en.hasMoreElements();) 			{				NetworkInterface intf = en.nextElement();				for (Enumeration<InetAddress> enumIpAddr = intf				        .getInetAddresses(); enumIpAddr.hasMoreElements();) 				{				    InetAddress inetAddress = enumIpAddr.nextElement();				    if (!inetAddress.isLoopbackAddress()				            && inetAddress instanceof Inet4Address) 				    {				        // if (!inetAddress.isLoopbackAddress() && inetAddress				        // instanceof Inet6Address) {				        return inetAddress.getHostAddress().toString();				    }				}			}		} 		catch (Exception e) 		{			e.printStackTrace();		}		return "";	}	 	public static boolean isAvailable(Context context) {		NetworkInfo info = getActiveNetworkInfo(context);		return info != null && info.isAvailable() && !info.isRoaming();	}	public static boolean isWifi(Context context) {		NetworkInfo info = getActiveNetworkInfo(context);		if (info != null) {			if (info.isConnectedOrConnecting()) {				return info.getType() == ConnectivityManager.TYPE_WIFI;			}		}		return false;	}		public static int getActiveNetworkType(Context context)	{		NetworkInfo info = getActiveNetworkInfo(context);		if (info != null) {			if (info.isConnectedOrConnecting()) {				return info.getType();			}		}		return -1;	}	public static boolean isMobile(Context context) {		NetworkInfo info = getActiveNetworkInfo(context);		if (info != null) {			if (info.isConnectedOrConnecting()) {				return info.getType() == ConnectivityManager.TYPE_MOBILE;			}		}		return false;	}	/**	 * 判断手机网络是否是2G网络	 * 	 * @return true 是2G网络	 */	public static boolean is2G(Context context) {		NetworkInfo info = getActiveNetworkInfo(context);		if (info == null)			return false;		if (info.getType() == ConnectivityManager.TYPE_MOBILE) {			switch (info.getSubtype()) {			case TelephonyManager.NETWORK_TYPE_GPRS:// 联通的2G			case TelephonyManager.NETWORK_TYPE_EDGE:// 移动2G			case TelephonyManager.NETWORK_TYPE_CDMA:// 电信2G				return true;			}		}		return false;	}	/**	 * 网络是否可用	 * 	 * @param context	 * @return	 */	public static boolean isNetworkAvailable(Context context) {		ConnectivityManager mgr =  ((ConnectivityManager) context				.getSystemService(Context.CONNECTIVITY_SERVICE));		NetworkInfo[] info = (mgr != null) ? mgr.getAllNetworkInfo() : null;		if (info != null) {			for (int i = 0; i < info.length; i++) {				if (info[i].getState() == NetworkInfo.State.CONNECTED) {					return true;				} else {				}			}		}		return false;	}	public static int getNetEnv(Context context){		if(isWifi(context) ){			return 1;		}		if(is2G(context)){			return 2;		}		return 3;	}	public static int getNetworkClass(int networkType) {		switch (networkType) {			case TelephonyManager.NETWORK_TYPE_GPRS:			case TelephonyManager.NETWORK_TYPE_EDGE:			case TelephonyManager.NETWORK_TYPE_CDMA:			case TelephonyManager.NETWORK_TYPE_1xRTT:			case TelephonyManager.NETWORK_TYPE_IDEN:				return 1;//2g			case TelephonyManager.NETWORK_TYPE_UMTS:			case TelephonyManager.NETWORK_TYPE_EVDO_0:			case TelephonyManager.NETWORK_TYPE_EVDO_A:			case TelephonyManager.NETWORK_TYPE_HSDPA:			case TelephonyManager.NETWORK_TYPE_HSUPA:			case TelephonyManager.NETWORK_TYPE_HSPA:			case TelephonyManager.NETWORK_TYPE_EVDO_B:			case TelephonyManager.NETWORK_TYPE_EHRPD:			case TelephonyManager.NETWORK_TYPE_HSPAP:				return 2;//3g			case TelephonyManager.NETWORK_TYPE_LTE:				return 3;//4g			default:				return 4;//other		}	}	public static eNetType getNetworkeNetType(Context context){		if(isWifi(context)){			return eNetType.eWifi;		}		switch (getNetworkClass(getActiveNetworkType(context))){			case 1:				return eNetType.e2G;			case 2:				return eNetType.e3G;			case 3:				return eNetType.e4g;			case 4:				return eNetType.eNone;		}		return eNetType.eNone;	}	public static String getNetworkStr(Context context){		if (!isAvailable(context)) {			return networkTypeNames[0];		}		if (isWifi(context)) {			return networkTypeNames[5];		}		int type = getActiveNetworkType(context);		int networkClass = getNetworkClass(type);		if ((networkClass < networkTypeNames.length && networkClass >= 0)) {			return networkTypeNames[networkClass];		}		return networkTypeNames[0];	}	public static final String[] networkTypeNames={			"IMONetworkWWANTypeNotReachable",			"IMONetworkWWANType2G",			"IMONetworkWWANType3G",			"IMONetworkWWANType4G",			"IMONetworkWWANTypeUnknown",			"IMONetworkWWANTypeWIFI",	};}